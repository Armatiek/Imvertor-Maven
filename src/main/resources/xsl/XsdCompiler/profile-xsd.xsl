<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    
    xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:local="urn:local"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:gml="http://www.opengis.net/gml/3.2" 
    xmlns:imvert="http://www.imvertor.org/schema/system"
    xmlns:imf="http://www.imvertor.org/xsl/functions"
    
    xmlns:cs="http://www.imvertor.org/metamodels/conceptualschemas/model/v20181210"
    
    version="3.0" expand-text="yes"
    
    exclude-result-prefixes="local">
    
    <xsl:import href="../common/Imvert-common.xsl"/>
    <xsl:import href="../common/Imvert-common-conceptual-map.xsl"/>
    
    <xsl:param name="config-name" as="xs:string"/> <!-- name/description of the profile -->
    <xsl:param name="config-version" as="xs:string"/> <!-- version of the profile -->
    <xsl:param name="config-xlink-url" as="xs:string"/> <!-- url to xlink xsd -->
    <xsl:param name="config-schemas" as="xs:string"/> <!-- the UTLs of files that may be used as basis for profile selection -->
    
    <xsl:output method="xml" indent="yes"/>
    
    <!-- all constructs that should be made part of the profile -->
    <xsl:variable name="config-types" select="distinct-values(//*[imvert:type-package = 'GML']/imvert:type-name)" as="xs:string*"/>
    <!-- add the attribute types configured in the conceptual schema mapping -->
    <xsl:variable name="config-attributes" select="for $n in $config-types return $conceptual-schema-mapping//cs:XsdType[cs:name = $n]/cs:asAttribute" as="xs:string*"/>
    
    <xsl:variable name="config-constructs" select="distinct-values(($config-types,$config-attributes))"/>
    
    <!-- haal eerst alle schema's binnen -->
    <xsl:variable name="schema-constructs" as="element()*">
        <xsl:for-each select="for $s in tokenize(normalize-space($config-schemas),';') return if ($s != '') then $s else ()">
            <xsl:variable name="xsd" select="doc(.)" as="document-node()"/>
            <xsl:sequence select="$xsd/*:schema/*:element"/>
            <xsl:sequence select="$xsd/*:schema/*:complexType"/>
            <xsl:sequence select="$xsd/*:schema/*:simpleType"/>
            <xsl:sequence select="$xsd/*:schema/*:group"/>
            <xsl:sequence select="$xsd/*:schema/*:attribute"/>
            <xsl:sequence select="$xsd/*:schema/*:attributeGroup"/>
        </xsl:for-each>
    </xsl:variable>
    
    <xsl:template match="/">
        
        <xsl:variable name="schema" as="element()">
            <schema 
                version="{$config-version}" 
                elementFormDefault="qualified" 
                targetNamespace="http://www.opengis.net/gml/3.2">
                
                <xsl:comment>Generated by Imvertor <xsl:value-of select="imf:get-xparm('run/version')"/> at <xsl:value-of select="imf:get-xparm('run/start')"/></xsl:comment>

                <annotation>
                    <documentation><xsl:value-of select="$config-name"/> for model "<xsl:value-of select="imf:get-xparm('appinfo/subpath')"/>"</documentation>
                    <documentation>This XML schema profile only records the constructs of the schema that are required by the client schema. Changes in the client schema may affect the contents of this profile.</documentation>
                </annotation>
                
                <import namespace="http://www.w3.org/1999/xlink" schemaLocation="{$config-xlink-url}"/>
                
                <!-- haal alle namen van alle constructs op waarnaar wordt gerefereerd. -->
                <xsl:variable name="names" select="local:all-references($schema-constructs[@name = $config-constructs],$config-constructs)" as="xs:string*"/>
                <xsl:for-each select="($config-constructs, distinct-values($names))">
                    <xsl:sort select="."/>
                    <xsl:variable name="name" select="."/>
                    <xsl:copy-of select="$schema-constructs[@name = $name]"/>
                </xsl:for-each>
                
            </schema>
        </xsl:variable>
        
        <xsl:sequence select="$schema"/>
            
    </xsl:template>
    
    <xsl:function name="local:all-references" as="xs:string*">
        <xsl:param name="constructs" as="element()*"/>
        <xsl:param name="tally" as="xs:string*"/>
        
        <!-- haal de refs op -->
        <xsl:for-each select="$constructs/descendant-or-self::*/(@ref | @type | @base | @substitutionGroup | @memberTypes)">
            <xsl:for-each select="tokenize(.,'\s+')"><!-- nodig voor union/@memberTypes -->
                <xsl:variable name="nametoks" select="tokenize(.,':')"/>
                <xsl:variable name="qualifier" select="$nametoks[1]"/>
                <xsl:variable name="name" select="$nametoks[2]"/>
                
                <xsl:choose>
                    <xsl:when test="empty($name)">
                        <!-- primitive -->
                    </xsl:when>
                    <xsl:when test="$qualifier = 'gml'">
                        <xsl:if test="not($name = $tally)">
                            <xsl:value-of select="$name"/>
                            <xsl:variable name="c" select="$schema-constructs[@name = $name]"/>
                            <xsl:if test="exists($c)">
                                <xsl:sequence select="local:all-references($c,($tally, $name))"/>
                            </xsl:if>
                        </xsl:if>
                    </xsl:when>
                    <xsl:when test="$qualifier = 'xlink'">
                        <!-- import compleet -->
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:message select="."/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
        
    </xsl:function>
        
</xsl:stylesheet>