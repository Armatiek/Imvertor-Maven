<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * Copyright (C) 2016 Dienst voor het kadaster en de openbare registers
 * 
 * This file is part of Imvertor.
 *
 * Imvertor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Imvertor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Imvertor.  If not, see <http://www.gnu.org/licenses/>.
-->
<xsl:stylesheet 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    
    xmlns:imvert="http://www.imvertor.org/schema/system"
    xmlns:ext="http://www.imvertor.org/xsl/extensions"
    xmlns:imf="http://www.imvertor.org/xsl/functions"
    xmlns:imvert-result="http://www.kadaster.nl/schemas/imvertor/application/v20141001"
    xmlns:functx="http://www.functx.com"
    xmlns:dn="/Dimitre/Novatchev"
    
    version="2.0">

    <!--
        This stylesheet processes the context document by calling the generated comparision stylesheet 
        and implementing the report template to return a neat overview of all differences 
        to be listed later in table format in the /doc section.
    -->
   
    <xsl:import href="../../../../common/Imvert-common.xsl"/>
    <xsl:import href="Imvert2compare-common.xsl"/>
    
    <!-- this import file is generated by the xml-to-diff.xsl meta-stylesheet -->
    <xsl:import href="../../../../external/xpath.xsl"/>
    
    <xsl:import href="http://www.imvertor.org/imvertor/1.0/xslt/compare/compare-generated.xsl"/><!-- resolved by catalog! -->
    
    <xsl:output indent="no"/>
    
    <xsl:variable name="ctrl-url" select="imf:path-to-file-uri($ctrl-filepath)"/>
    <xsl:variable name="test-url" select="imf:path-to-file-uri($test-filepath)"/>
    
    <xsl:variable name="ctrl-doc" select="document($ctrl-url)"/>
    <xsl:variable name="test-doc" select="document($test-url)"/>

    <xsl:template match="/">
        <imvert:report>
            <imvert:ctrl>
                <xsl:value-of select="$ctrl-url"/>
            </imvert:ctrl>           
            <imvert:test>
                <xsl:value-of select="$test-url"/>
            </imvert:test>           
            <xsl:variable name="ctrl-diffs">
                <xsl:apply-templates select="$ctrl-doc/*" mode="compare"/> <!-- returns a sequence of diff elements -->
            </xsl:variable>
            <xsl:for-each-group select="$ctrl-diffs/imvert:diff" group-by="@ctrl-id">
                <imvert:diffs ctrl-id="{@ctrl-id}">
                    <xsl:for-each select="current-group()">
                        <xsl:sequence select="."/>
                    </xsl:for-each>
                </imvert:diffs>
            </xsl:for-each-group>
            <xsl:variable name="test-diffs">
                <xsl:apply-templates select="$test-doc/*" mode="compare"/> <!-- returns a sequence of diff elements -->
            </xsl:variable>
            <xsl:for-each-group select="$test-diffs/imvert:diff" group-by="@test-id">
                <imvert:diffs test-id="{@test-id}">
                    <xsl:for-each select="current-group()">
                        <xsl:sequence select="."/>
                    </xsl:for-each>
                </imvert:diffs>
            </xsl:for-each-group>
            <xsl:sequence select="imf:set-xparm('application/differencesfound',count($ctrl-diffs) + count($test-diffs))"/>
        </imvert:report>
   
    </xsl:template>
    
    <!-- 
        This is the default reporting on the differences found
        Any specific context should implement its own variant 
    -->
    <xsl:template name="report">
        <xsl:param name="ctrl" as="item()?"/>
        <xsl:param name="test" as="item()?"/>
        <xsl:param name="diff" as="document-node()"/>
      
        <xsl:variable name="desc-raw" select="$diff/diff/@desc"/>
        
        <xsl:variable name="desc" as="xs:string?">
            <xsl:choose>
                <xsl:when test="$desc-raw = 'attribute value'">
                    <xsl:value-of select="'attribute value'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'sequence of child nodes'">
                    <!--<xsl:value-of select="'(-1)'"/>-->
                </xsl:when>
                <xsl:when test="$desc-raw = 'number of child nodes'">
                    <!--<xsl:value-of select="'(0)'"/>-->
                </xsl:when>
                <xsl:when test="$desc-raw = 'presence of child node' and exists($ctrl) and $ctrl = '#text'">
                    <xsl:value-of select="'removed (text)'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'text value' and (normalize-space($ctrl) or normalize-space($test))">
                    <xsl:value-of select="'changed (text)'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'presence of child node' and exists($ctrl) and not(normalize-space($ctrl))">
                    <xsl:value-of select="'empty node removed'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'presence of child node' and exists($ctrl)">
                    <xsl:value-of select="'removed'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'presence of child node' and exists($test)">
                    <xsl:value-of select="'added'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'presence of child nodes to be' and exists($test)"> <!-- TODO check this, is this correct? -->
                    <xsl:value-of select="'added'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'text value'">
                    <xsl:value-of select="'text value'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'number of element attributes'">
                    <xsl:value-of select="'?? number of attributes'"/>
                </xsl:when>
                <xsl:when test="$desc-raw = 'attribute name'">
                    <xsl:value-of select="'?? attribute name'"/>
                </xsl:when>
                
                <xsl:otherwise>
                    <xsl:message select="concat('Unknown or unexpected compare state: ', $desc-raw)"/>
                    <xsl:value-of select="$desc-raw"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        
        <xsl:choose>
            <xsl:when test="empty($desc)">
                <!-- skip -->
            </xsl:when>
            <xsl:when test="$desc = 'added' and not(normalize-space($test))">
                <!-- skip -->
            </xsl:when>
            <xsl:otherwise>
                <imvert:diff ctrl-id="{$diff/diff/ctrl/@path}" test-id="{$diff/diff/test/@path}"> <!---->
                    <imvert:ctrl>
                        <xsl:sequence select="imf:get-node-representation($ctrl)"/>
                    </imvert:ctrl>
                    <imvert:test>
                        <xsl:sequence select="imf:get-node-representation($test)"/>
                    </imvert:test>
                    <imvert:change>
                       <xsl:value-of select="$desc"/>
                    </imvert:change>
                    <imvert:level>user</imvert:level>
                </imvert:diff>
            </xsl:otherwise>
        </xsl:choose>
              
    </xsl:template>
    
    <xsl:function name="imf:decode-base-name" as="xs:string*">
        <xsl:param name="encoded-name"/>
        <xsl:sequence select="subsequence(tokenize($encoded-name,'\.'),2)"/>
    </xsl:function>
    
    <xsl:function name="imf:get-node-representation" as="element()*">
        <xsl:param name="node" as="item()*"/>
        
        <xsl:variable name="file" select="$node/ancestor-or-self::*:file"/>
        <xsl:variable name="node-type" select="functx:type-of($node)"/>
        
        <imvert:file>
            <xsl:copy-of select="$file/@*"/>
        </imvert:file>
        <imvert:path>
            <xsl:value-of select="dn:generate-xpath($node)"/>
        </imvert:path>
        <imvert:type>
            <xsl:value-of select="$node-type"/>
        </imvert:type>
        <imvert:node>
            <xsl:value-of select="if ($node-type = 'element') then local-name($node) else $node"/>
        </imvert:node>
    </xsl:function>
    
</xsl:stylesheet>