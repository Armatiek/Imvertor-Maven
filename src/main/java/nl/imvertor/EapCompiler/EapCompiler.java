/*
 * Copyright (C) 2016 Dienst voor het kadaster en de openbare registers
 * 
 * This file is part of Imvertor.
 *
 * Imvertor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Imvertor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Imvertor.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package nl.imvertor.EapCompiler;

import java.io.File;

import org.apache.log4j.Logger;

import nl.imvertor.XmiCompiler.XmiCompiler;
import nl.imvertor.common.Runner;
import nl.imvertor.common.Step;
import nl.imvertor.common.Transformer;
import nl.imvertor.common.file.AnyFile;
import nl.imvertor.common.file.EapFile;
import nl.imvertor.common.file.XmlFile;

/**
 * An EapCompiler creates new EAP files based on a template and data provided. 
 * 
 * @author arjan
 *
 */
public class EapCompiler extends Step {

	protected static final Logger logger = Logger.getLogger(XmiCompiler.class);
	
	public static final String STEP_NAME = "EapCompiler";
	public static final String VC_IDENTIFIER = "$Id: EapCompiler.java 7497 2016-04-14 07:11:24Z arjan $";

	private EapFile templateFile;
	
	/**
	 *  run the main translation
	 */
	public boolean run() throws Exception{
		
		// set up the configuration for this step
		configurator.setActiveStepName(STEP_NAME);
		prepare();

		// get the template file information, notably the GUID for the model in this template. 
		templateFile = new EapFile(configurator.getParm("properties","TEMPLATE_TEMPLATE_FILE"));
			
		// compile EAP from template based on current Imvertor file.
		boolean must = runner.getAppPhase() == Runner.APPLICATION_PHASE_FINAL;
		boolean wantTemplate = configurator.isTrue("cli","createtemplate");
		boolean wantDocument = configurator.isTrue("cli","createumlreport"); // deprecated, function will be removed
		boolean wantDerived = configurator.isTrue("cli","createderivedeap"); 
		boolean canProcessEA = configurator.isEaEnabled();
		
		AnyFile umlfile = new AnyFile(configurator.getParm("cli","umlfile"));
		boolean iseap = umlfile.getExtension().equals("eap");
		boolean isxmi = umlfile.getExtension().equals("xmi");
		boolean iszip = umlfile.getExtension().equals("zip");
		
		if (iseap || isxmi || iszip) {
			// generate UML template
			if (wantTemplate || must) 
				if (iseap)
					if (canProcessEA)
						generateEapTemplate(); // deprecated, function will be removed
					else 
						runner.warn(logger,"EA is not available on this system",null,"ENAOTS");
				else if (isxmi || iszip)
					generateXmiTemplate();
			
			// generate UML report
			if (wantDocument) {
				if (iseap && canProcessEA)
					generateUmlReport(); // deprecated, function will be removed
				else 
					runner.warn(logger,"EA is not available on this system",null,"ENAOTS");
			} 
			if (wantDerived && !wantDocument)
				if (isxmi || iszip)
					generateDerivedXmi();
			// note that derived stuff is generated by documentation for EA cases.
			// TODO rearrange an clarify
		} else
			runner.fatal(logger,"Unexpected extension for UML file: " + umlfile.getExtension(),null,"UEFUF");
		
		configurator.setStepDone(STEP_NAME);
		
		// save any changes to the work configuration for report and future steps
	    configurator.save();
	    
	    report();

		return runner.succeeds();
	
	}
	
	/**
	 * Create template XMI.
	 *  
	 * @param eapFile
	 * @return
	 * @throws Exception
	 */
	private void generateXmiTemplate() throws Exception  {
		runner.info(logger,"Creating template XMI");
		
		// create a transformer
		Transformer transformer = new Transformer();
		transformer.transformStep("system/xmi-export-file-path","properties/RESULT_TEMPLATE_XMI_FILE", "properties/IMVERTOR_TEMPLATE_XSLPATH");
	
		// copy this to the etc folder
		XmlFile tempXmiFile = new XmlFile(configurator.getParm("properties", "RESULT_TEMPLATE_XMI_FILE"));
		XmlFile targetXmiFile = new XmlFile(new File(configurator.getParm("system", "work-etc-folder-path")),"template.xmi");
		tempXmiFile.copyFile(targetXmiFile);
	}
	
	/**
	 * Generate an XMI file with full info, most notably tthe info derived from supplier models.
	 * Copy the result file to the etc folder as full.xmi
	 * 
	 * @throws Exception
	 */
	public void generateDerivedXmi() throws Exception {
		
		runner.info(logger,"Creating derived XMI");

		Transformer transformer = new Transformer();
		transformer.transformStep("system/xmi-file-path","properties/WORK_FULL_XMI_FILE", "properties/IMVERTOR_REPORTINGCOPY_XSLPATH");
		
		// copy this to the etc folder
		XmlFile tempXmiFile = new XmlFile(configurator.getParm("properties", "WORK_FULL_XMI_FILE"));
		XmlFile targetXmiFile = new XmlFile(new File(configurator.getParm("system", "work-etc-folder-path")),"derived.xmi");
		tempXmiFile.copyFile(targetXmiFile);
	}
	
	/**
	 * Create a template by importing the XMI into the EAP template file.
	 *  
	 * @param eapFile
	 * @return
	 * @throws Exception
	 */
	private EapFile generateEapTemplate() throws Exception  {
		
		runner.warn(logger,"Creation of EA template is deprecated.");
		
		generateXmiTemplate();
		
		runner.info(logger,"Creating template EAP file");
		EapFile localCopyFile = new EapFile(configurator.getParm("properties","RESULT_TEMPLATE_EAP_FILE")); // result eap file
		// Create template file by copying the template file, and importing the XMI
		runner.debug(logger,"CHAIN","Importing XMI into EAP: " + localCopyFile.getName());
		templateFile.copyFile(localCopyFile);
		localCopyFile.open();
		localCopyFile.importFromXmiFile(configurator.getParm("properties","RESULT_TEMPLATE_XMI_FILE"));
		localCopyFile.close();
		
		return localCopyFile;
 
	}
	
	
	/**
	 * Generate an UML report. 
	 * 
	 * @throws Exception
	 */
	public void generateUmlReport() throws Exception {
		
		runner.warn(logger,"Creation of EA UML documentation is deprecated.");
		
		EapFile eapFile = new EapFile(configurator.getParm("cli","umlfile"));
		
		runner.info(logger,"Reporting on EA UML");
		boolean succeeds = true;
		
		/**
		 * process is:
		 * 	take the original EAP.
		 * 	create an EAP copy
		 * 	export to XMI
		 * 	add info to the XMI
		 * 	import this into the copy.
		 */
		runner.debug(logger,"CHAIN","Enhancing EAP information");
		
		EapFile tempEapFile = new EapFile(configurator.getParm("properties", "WORK_EAP_FILE"));
		XmlFile tempXmiFile = new XmlFile(configurator.getParm("properties", "WORK_TEMP_XMI_FILE"));
		XmlFile fullXmiFile = new XmlFile(configurator.getParm("properties", "WORK_FULL_XMI_FILE"));
	
		// TODO opening EA files is time consuming; can this be enhanced?
		eapFile.open();
		try {
			eapFile.exportToXmiFile(tempXmiFile.getCanonicalPath());
			// transform XMI file
			Transformer transformer = new Transformer();
			succeeds = transformer.transformStep("properties/WORK_TEMP_XMI_FILE","properties/WORK_FULL_XMI_FILE", "properties/IMVERTOR_REPORTINGCOPY_XSLPATH");
		} finally {
			eapFile.close();
		}
		if (!succeeds)
			throw new Exception("Errors found while compiling XMI information");
		
		runner.debug(logger,"CHAIN","Importing enhanced information into EAP");
		
		AnyFile gf = new AnyFile(configurator.getParm("properties","TEMPLATE_TEMPLATE_FILE_GUID"));
		if (gf.isFile()) {
			String templateFileModelGUID = gf.getContent();
			configurator.setParm("system","template-file-model-guid", templateFileModelGUID);
			templateFile.copyFile(tempEapFile);
			tempEapFile.open();
			try {
				tempEapFile.importXML(templateFileModelGUID, fullXmiFile.getCanonicalPath());
				if (configurator.isTrue("cli","createumlreport")) {
					File workDirectoryToReport = new File(configurator.getParm("system","work-uml-folder-path"),"report");
					File directoryToReport = new File(configurator.getParm("properties","RESULT_UML_FOLDER"));
					runner.debug(logger,"CHAIN","Generating UML report to " + directoryToReport);
					tempEapFile.exportToHtmlReport(workDirectoryToReport.getAbsolutePath(), configurator.getParm("cli","application"), "");
					configurator.setParm("system", "uml-report-available", "true");
				}
			} finally {
				tempEapFile.close();
			}
			if (configurator.isTrue("cli","createumlreport") && configurator.isTrue("cli","createderivedeap")) {
				EapFile targetFile = new EapFile(configurator.getParm("properties","RESULT_DERIVED_EAP_FILE")); 
				tempEapFile.copyFile(targetFile);
			}
		} else
			runner.fatal(logger,"Incomplete configuration, cannot find template GUID at " + gf.getCanonicalPath(),null,"ICCFTGA");
			
	}
	
	
	
}
